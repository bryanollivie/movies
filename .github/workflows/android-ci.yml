name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # 3. Gradle cache extra (mais agressivo)
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Configuração de Secrets (exemplo para local.properties)
      - name: Setup local.properties
        run: |
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> local.properties
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> local.properties

      # 5. Decode Keystore (se necessário para gerar APK/AAB)
      - name: Decode Keystore
        if: ${{ secrets.KEYSTORE_BASE64 != '' }}
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/keystore.jks

      # 6. Build
      - name: Build Debug
        run: ./gradlew assembleDebug --stacktrace

      # 7. Testes unitários
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # 8. (Opcional) Lint & checks
      - name: Run Lint
        run: ./gradlew lint

      # 9. (Opcional) Upload APK como artefato
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk
